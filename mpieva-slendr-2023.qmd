---
title: "_slendr_ simulations"
subtitle: "practical workshop at MPI EVA Leipzig"
author: "Martin Petr"
date: "February 2023"
date-format: "MMMM YYYY"
format:
  # revealjs:
  #   eval: true
  #   echo: true
  #   code-line-numbers: false
  #   fig-align: center
  #   slide-number: true
  html:
    eval: true
    echo: true
    code-line-numbers: false
    fig-align: center
# execute:
#   cache: true
---

# 

::: columns
::: {.column width="70%"}
> Many problems in population genetics cannot be solved by a mathematician, no matter how gifted. \[It\] is already clear that computer methods are very powerful. This is good. It \[...\] **permits people with limited mathematical knowledge to work on important problems** \[...\]
:::

::: {.column width="30%"}
![](images/crow.jpeg)

[James F. Crow](https://en.wikipedia.org/wiki/James_F._Crow) -- [interview](http://www.gnxp.com/blog/2006/06/10-questions-for-jim-crow.php)
:::
:::

# Why use simulations?

1.  Making sense of estimated statistics
2.  Fitting model parameters
3.  Ground truth for method work

## Making sense of estimated statistics

<center>![](images/bacho_kiro.png){width="70%"}</center>

::: aside
[Hajdinjak (2021)](https://www.nature.com/articles/s41586-021-03335-3/figures/2)
:::

## Making sense of estimated statistics

<center>![](images/elephants.png){width="65%"}</center>

::: aside
[Palkopoulou (2018)](https://www.pnas.org/doi/10.1073/pnas.1720554115)
:::

## Making sense of estimated statistics

<center>![](images/neand_decline.png){width="65%"}</center>

::: aside
[Petr (2019)](https://www.pnas.org/doi/abs/10.1073/pnas.1814338116)
:::

## Fitting model parameters (i.e. [ABC](https://en.wikipedia.org/wiki/Approximate_Bayesian_computation))

<center>![](images/abc_scheme.png){width="50%"}</center>

::: aside
Image from [Wikipedia on ABC](https://en.wikipedia.org/wiki/Approximate_Bayesian_computation)
:::

## Ground truth for methods work

<center>![](images/mcmc.png)</center>

::: aside
[Schiffels and Durbin (2014)](https://www.nature.com/articles/ng.3015)
:::

## There are many simulation tools

<br>

The most famous and widely used are [SLiM](https://messerlab.org/slim/) and [*msprime*](https://tskit.dev/msprime/docs/stable/intro.html).

::: fragment
<br>

Both are very powerful...

... but they require a lot of programming knowledge\...

... and a lot of code for non-trivial simulations (üêõü™≤üêú).
:::

::: fragment
<br>

<center>**This is why we will focus on [*slendr*](http://www.slendr.net),**<br>a convenient R interface to both SLiM and *msprime*.</center>
:::

# SLiM

## 

::: columns
::: {.column width="60%"}
<h2>What is SLiM?</h2>

::: fragment
-   **Forward-time simulator**
:::

::: fragment
-   It's fully programmable!
:::

::: fragment
-   Massive library of functions for:
    -   Demographic events
    -   Various mating systems
    -   Selection, quantitative traits, ...
:::

::: fragment
-   \> 700 pages long [manual](https://github.com/MesserLab/SLiM/releases/download/v3.7.1/SLiM_Manual.pdf)!
:::
:::

::: {.column width="40%"}
<center>![Modified from Alexei Drummond](images/sim_sketches.001.png){width="100%"}</center>
:::
:::

## SLiMgui -- [IDE](https://en.wikipedia.org/wiki/Integrated_development_environment) for SLiM

<center>![](images/slimgui.png)</center>

## Simple neutral simulation in SLiM

```{bash}
#| echo: false
cat data/script.slim
```

# *msprime*

## 

::: columns
::: {.column width="60%"}
<h2>What is [*msprime*](https://tskit.dev/msprime/docs/stable/intro.html)?</h2>
:::

::: {.column width="40%"}
<center>![Modified from Alexei Drummond](images/sim_sketches.001.png){width="100%"}</center>
:::
:::

## 

::: columns
::: {.column width="60%"}
<h2>What is [*msprime*](https://tskit.dev/msprime/docs/stable/intro.html)?</h2>

::: fragment
-   A Python module for writing **coalescent simulations**
:::

::: fragment
-   Extremely fast (genome-scale, population-scale data)
:::

::: fragment
-   You must know Python fairly well to build complex models
:::
:::

::: {.column width="40%"}
<center>![Modified from Alexei Drummond](images/sim_sketches.002.png){width="100%"}</center>
:::
:::

## Simple simulation using *msprime*

This is basically the same model as the SLiM script earlier:

```{bash}
#| echo: false
cat data/script.py
```

::: aside
source: [link](https://tskit.dev/msprime/docs/stable/demography.html#demographic-models)
:::

# 

<center>

![](images/slendr_logo.png){width="30%"}

<br>

<h2>[www.slendr.net](https://www.slendr.net)</h2>

</center>

## Why a new package? -- spatial simulations!

::: fragment
<center>![](images/animation.gif){width="70%"}</center>
:::

## Why a new package?

. . .

-   Most researchers are not expert programmers

-   All but the most trivial simulations require lots of code

. . .

-   90% <citation needed> of simulations are basically the same!

    -   create populations (splits and $N_e$ changes)

    -   specify if/how they should mix (rates and times)

    -   save output (VCF, EIGENSTRAT)

. . .

-   Lot of code duplication across projects

# Let's get started

## We will need *slendr* & *tidyverse*

<br>

```{r}
#| cache: false
# load data analysis and plotting packages
library(dplyr)     
library(ggplot2)
library(magrittr)

# load slendr itself
library(slendr)
init_env()
```

<center><br>*(ignore the message about missing SLiM)*</center>

# 

::: {style="text-align: right"}
<h1>*slendr* haiku</h1>
:::

<br>

::: {style="text-align: right"}
Build simple models,

<br>

simulate data from them.

<br>

Just one plain R script.
:::

## Typical steps (outline of this tutorial)

<br>

1.  creating populations
2.  scheduling population splits
3.  programming $N_e$ size changes
4.  encoding gene-flow events
5.  simulation sequence of a given size
6.  computing statistics from simulated outputs

## Creating a `population()`

Each needs a name, size and time of appearance (i.e., "split"):

```{r}
pop1 <- population("pop1", N = 1000, time = 1)
```

. . .

<br>

This creates a normal R object. Typing it gives a summary:

```{r}
pop1
```

## Programming population splits

Splits are indicated by the `parent = <pop>` argument:

```{r}
pop2 <- population("pop2", N = 100, time = 50, parent = pop1)
```

. . .

<br>

The split is reported in the "historical summary":

```{r}
pop2
```

## Scheduling resize events -- `resize()`

Step size decrease:

```{r}
#| code-line-numbers: "1|2"
pop1 <- population("pop1", N = 1000, time = 1)
pop1_step <- resize(pop1, N = 100, time = 500, how = "step")
```

. . .

Exponential increase:

```{r}
#| code-line-numbers: "1|2"
pop2 <- population("pop2", N = 100, time = 50, parent = pop1)
pop2_exp <- resize(pop2, N = 10000, time = 500, end = 2000, how = "exponential")
```

## Tidyverse-style [pipe](https://magrittr.tidyverse.org) `%>%` interface

A more concise way to express the same thing as before.

Step size decrease:

```{r}
pop1 <-
  population("pop1", N = 1000, time = 1) %>%
  resize(N = 100, time = 500, how = "step")
```

Exponential increase:

```{r}
pop2 <-
  population("pop2", N = 1000, time = 1) %>%
  resize(N = 10000, time = 500, end = 2000, how = "exponential")
```

## A more complex model

```{r}
pop1 <- population("pop1", N = 1000, time = 1)

pop2 <-
  population("pop2", N = 1000, time = 300, parent = pop1) %>%
  resize(N = 100, how = "step", time = 1000)

pop3 <-
  population("pop3", N = 1000, time = 400, parent = pop2) %>%
  resize(N = 2500, how = "step", time = 800)

pop4 <-
  population("pop4", N = 1500, time = 500, parent = pop3) %>%
  resize(N = 700, how = "exponential", time = 1200, end = 2000)

pop5 <-
  population("pop5", N = 100, time = 600, parent = pop4) %>%
  resize(N = 50, how = "step", time = 900) %>%
  resize(N = 250, how = "step", time = 1200) %>%
  resize(N = 1000, how = "exponential", time = 1600, end = 2200) %>%
  resize(N = 400, how = "step", time = 2400)
```

## Remember that *slendr* objects internally carry their whole history!

```{r}
pop5
```

## Last step before simulation: `compile_model()`

<br>

```{r}
model <- compile_model(
  list(pop1, pop2, pop3, pop4, pop5),
  generation_time = 1,
  simulation_length = 3000
)
```

<br>

<center>**Compilation takes a list of model components, performs internal consistency checks, returns a single model object.**</center>

::: aside
The model is also compiled to disk which gives a nice additional layer of reproducibility. The exact location can be specified via `path =` argument to `compile_model()`.
:::

## Model summary

Typing the compiled model into R prints a brief summary:

```{r}
model
```

## Model visualization

```{r}
#| fig-width: 7
#| fig-align: center
plot_model(model)
```

# Exercise #1

## Exercise #1 --- write your own model!

::: columns
::: {.column width="50%"}

::: {.fragment}
You can use this "template":

```{r}
#| eval: false
library(slendr)
init_env()

chimp <- population(...)
# <... rest of your code ...>

model <- compile_model(
  populations = list(chimp, ...),
  generation_time = 30
)

plot_model(model) # verify visually
```
:::
:::

::: {.column width="50%"}
![](images/intro_model1.png)
:::
:::

::: aside
Don't worry about gene flow just yet. We will add that at a later stage.

Feel free to include expansions and contractions (maybe in EUR at some point?).
:::

# Exercise #1 --- solution

## Simulating data (finally...)

We have a compiled `model`, how do we simulate data?

. . .

*slendr* has two built-in simulation engines:

-   SLiM engine
-   *msprime* engine

. . .

<center>

<h4>**You don't have to write any *msprime* or SLiM code!**</h4>

</center>

. . .

<br> This is all that's needed:

```{r}
#| eval: false
ts <- msprime(model, sequence_length = 100e6, recombination_rate = 1e-8)
```

<center>(`ts` is a so-called **tree sequence**)</center>

# The output of a *slendr* simulation is a **tree sequence**

## What is tree sequence?

![](images/tree_sequence_diagram.png){width="80%" fig-align="center"}

-   a record of full genetic ancestry of a set of samples
-   an encoding of DNA sequence carried by those samples
-   an efficient analysis framework

# Why tree sequence?

<br>

<h3>Why not VCF, EIGENSTRAT, or a genotype table?</h3>

## What we usually have

<center>![](images/vcf_screenshot.png){width="90%"}</center>

## What we usually *want*

(As full as possible) a representation of our samples' history:

<center>![](images/tree_sequence_diagram.png)</center>

::: fragment
<center>**This is exactly what a tree sequence *is*.**</center>
:::

## Here is the magic

Tree sequences make it possible to directly compute many quantities of interest *without going via conversion to a genotype table/VCF*!

<center>![](images/tree_sequence_diagram.png)</center>

::: aside
[Ralph et al. (2020)](https://academic.oup.com/genetics/article/215/3/779/5930459)
:::

## How can we compute statistics without mutations?

There is a duality between mutations and branch lengths in trees (more [here](https://tskit.dev/tskit/docs/stable/stats.html)).

<center>

![](images/tree_sequence_diagram.png)

<h3>But what if we want mutations?</h3>

</center>

## Coalescent and mutation processes can be decoupled

<center>

![](images/tree_sequence_diagram.png)

<h3>This means we can add mutations<br>*after* the simulation.</h3>

</center>

## This allows efficient, massive simulations

If we have a simulated `ts` object, we can do:

```{r}
#| eval: false
ts_mutated <- ts_mutate(ts, mutation_rate = 1e-8)
```

<br>Or, with a shortcut:

```{r}
ts <-
  msprime(model, sequence_length = 100e6, recombination_rate = 1e-8) %>%
  ts_mutate(mutation_rate = 1e-8 )
```

<br>

<center>We will be using `ts_mutate()` throughout.</center>

## Tree sequences are also very efficient

<br>

Let's take this minimalistic model:

```{r}
#| eval: false
pop <- population("pop", time = 1e6, N = 10000)
model <- compile_model(pop, generation_time = 30, direction = "backward")
ts <- msprime(model, sequence_length = 1e6, recombination_rate = 1e-8)
```

(simulates 2 $\times$ 10000 chromosomes of 100 Mb)

. . .

<br>

**Runs in less than 30 seconds on my laptop!**

**Taking about 66 Mb of memory!**

## How does this work?!

. . .

<center>

![](images/tables.jpeg)

<center>

## Tree-sequence tables ([tskit docs](https://tskit.dev/tutorials/tables_and_editing.html))

::: row
::: columns
::: {.column width="60%"}
A tree (sequence) can be represented by

::: incremental
-   a table of <font color="orange">n</font><font color="green">o</font><font color="darkblue">d</font><font color="green">e</font><font color="darkblue">s</font>,
-   a table of [edges]{.underline} between nodes,
-   a table of <font color="red">mutations</font> on edges
:::
:::

::: {.column width="40%"}
<br>

<center>![](images/tree_diagram.png)</center>
:::
:::
:::

. . .

<center>

<h2>**A set of such tables is a tree sequence.**</h2>

</center>

## Tree-sequence tables in practice

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| fig-height: 13
set.seed(123)

ts <- msprime(model, sequence_length = 1e6, recombination_rate = 1e-8, random_seed = 42)

# make a tiny example simplified tree sequence
ts_tiny <- ts_samples(ts) %>% sample_n(4) %>% pull(name) %>% ts_simplify(ts, simplify_to = .)
# extract tree #1 as an ape tree and also a tskit tree
t_phylo <- ts_phylo(ts_tiny, 1, quiet = TRUE)
t_tskit <- ts_tree(ts_tiny, 1)

# plot the phylo tree with ape
suppressPackageStartupMessages(library(ggtree))
nodes <- ts_nodes(t_phylo) %>% as_tibble %>% dplyr::select(node = phylo_id, pop, node_id)
ggtree(t_phylo) %<+% nodes +
  geom_label(aes(label = node_id), size = 15) + 
  guides(color = "none")
```
:::

::: {.column width="50%"}
::: fragment
nodes:

```{r}
#| echo: false
ts_nodes(t_phylo) %>% head(3) %>% .[, c("node_id", "pop_id", "time")] %>% as.data.frame()
```
:::

::: fragment
edges:

```{r}
#| echo: false
ts_edges(t_phylo) %>% head(3) %>% .[, c("child_node_id", "parent_node_id")] %>% as.data.frame()
```
:::

::: fragment
mutations:

```{r}
#| echo: false
ts_table(ts_tiny, "mutations") %>% head(3) %>% .[, c("id", "site", "node", "time")] %>% as.data.frame()
```
:::
:::
:::

## Let's take the `model` we defined earlier...

```{r}
#| fig-align: center
#| echo: false
plot_model(model)
```

## ... and simulate tree sequence from it

<br>

```{r}
ts <- msprime(model, sequence_length = 1e6, recombination_rate = 1e-8)
```

<br>

<center>(A tree sequence can be saved to disk with `ts_save()`.)</center>

# What can we do with it?

## *slendr*'s R interface to [*tskit*](https://tskit.dev/tskit)

<center>

![](images/slendr_tskit.png)

This [R interface](https://www.slendr.net/reference/index.html#tree-sequence-loading-and-processing) links to Python methods implemented in [*tskit*](https://tskit.dev/tskit/docs/stable/python-api.html#statistics).

</center>

## Extracting sample information

Each "sampled" individual in *slendr* has a symbolic name, a sampling time, and a population assignment.

```{r}
#| fig-align: center
#| echo: false
#| fig-width: 8
plot_model(model)
```

## Extracting sample information

If we have a tree sequence `ts`, we can get samples with `ts_samples()`:

::: columns
::: {.column width="55%"}
```{r}
#| output-location: fragment
ts_samples(ts)
```
:::

::: {.column width="2%"}
¬†
:::

::: {.column width="43%"}
```{r}
#| output-location: fragment
ts_samples(ts) %>% count(pop)
```
:::
:::

## Analyzing tree sequences with *slendr*

<br>

Let's say we have the following model and we simulate a tree sequence from it.

```{r}
pop <- population("pop", N = 10000, time = 1)

model <- compile_model(pop, generation_time = 1, simulation_length = 10000)

ts <-
  msprime(model, sequence_length = 100e6, recombination_rate = 1e-8) %>%
  ts_mutate(mutation_rate = 1e-8)
```

<br>

<center>**Imagine we want to get the allele-frequency spectrum.**</center>

## Example: allele frequency spectrum

```{r}
#| echo: false
set.seed(42)
```

::: columns
::: {.column width="40%"}
```{r}
#| output-location: fragment
# sample 5 individuals
samples <-
  ts_samples(ts) %>%
  sample_n(5) %>%
  pull(name)

samples
```

::: {.fragment}
```{r}
#| output-location: fragment
# compute the AFS
afs <- ts_afs(
  ts, list(samples),
  polarised = TRUE
)

afs
```
:::

:::

::: {.column width="2%"}
¬†
:::

::: {.column width="58%"}
::: fragment
```{r}
#| eval: false
plot(afs, type = "b",
     xlab = "allele count bin",
     ylab = "frequency")
```

```{r}
#| echo: false
#| fig-height: 8
plot(afs, type = "b",
     xlab = "allele count bin",
     ylab = "frequency", lwd = 3,
     cex = 1.5, cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5
     )
```
:::
:::
:::

# Exercise #2

## Exercise #2 --- estimating $N_e$ from AFS

```{r}
#| echo: false
set.seed(42)
TRUE_NE <- 6543

pop <- population("pop", N = TRUE_NE, time = 100000)
model <- compile_model(pop, generation_time = 1, direction = "backward")

ts <-
  msprime(model, sequence_length = 10e6, recombination_rate = 1e-8, random_seed = 42) %>%
  ts_mutate(mutation_rate = 1e-8, random_seed = 42)

samples <- ts_samples(ts) %>% sample_n(10) %>% pull(name)

afs_observed <- ts_afs(ts, list(samples), polarised = TRUE)
```

You sequenced 10 individuals from one population and computed this AFS (counts of singletons, doubletons, ...):

<!-- ```{r} -->

<!-- #| echo: false -->

<!-- dput(as.vector(observed_afs)) -->

<!-- ``` -->

```{r}
afs_observed <- c(2520, 1449, 855, 622, 530, 446, 365, 334, 349, 244,
                  264, 218,  133, 173, 159, 142, 167, 129, 125, 143)
```

. . .

You know from fossil evidence that the population had constant $N_e$ for the past 100,000 generations, and that the $N_e$ was somewhere between 1000 and 30000.

. . .

**Use *slendr* to guess the true value of** $N_e$ given the observed AFS by running single-population simulations of different $N_e$ and comparing `ts_afs()` results to `afs_observed`.

## Exercise #2 -- hints

1.  Write an R function (in a new script) that gets $N_e$ as input, creates a *slendr* population, compiles a model, simulates a tree sequence, runs `ts_afs()` on it, and returns the AFS.

2.  Find the $N_e$ value that will give the closest AFS to the observed one. For instance, you could:

    -   a ) Plot simulated AFS for different $N_e$ with the AFS and just eyeball $N_e$ value that looks correct from a graph.

    -   b ) Simulate AFS automatically in steps of possible $N_e$ values and find the [closest matching](https://en.wikipedia.org/wiki/Mean_squared_error) one.

## Exercise #2 solution (a) -- eye-balling

## Exercise #2 solution (b) -- grid

# Gene flow / admixture

## `gene_flow()` events

Gene flow is programmed the `gene_flow()` function.

<br>

If we have populations `p1` and `p2`, we schedule gene flow with:

```{r}
#| eval: false
gf <- gene_flow(from = p1, to = p2, start = 500, end = 600, rate = 0.13)
```

. . .

Multiple gene-flow events can be gathered in a list:

```{r}
#| eval: false
gf <- list(
  gene_flow(from = p1, to = p2, start = 500, end = 600, rate = 0.13),
  gene_flow(from = <..>, to = <..>, start = <...>, end = <...>, rate = <...>),
  < potentially many more ... >
)
```

. . .

<br>

<center>**`gene_flow()` checks for consistency!**</center>

<!-- ## Behind the scenes -->

<!-- <br> -->

<!-- The output of `gene_flow()` is nothing but a data frame: -->

<!-- ```{r} -->

<!-- gf -->

<!-- ``` -->

<!-- However, the function does lots of consistency checks behind the scenes, so its better to always use it. -->

## Plugging gene flow(s) into the model

<br>
<br>

```{r}
#| eval: false
gf <- gene_flow(from = ..., to = ..., <start, end, rate>)

model <- compile_model(
  populations = list(...),
  gene_flow = gf,           # <--- gene flow(s) specified
  generation_time = 30
)
```

# Exercise #3

## Exercise #3 --- adding `gene_flow()`

Add Neanderthal introgression into your model from Exercise #1 (let's say 3% pulse NEA -> EUR at 55 kya).

```{r}
#| echo: false
#| fig-align: center
chimp <- population("CHIMP", time = 7e6, N = 5000)
afr <- population("AFR", parent = chimp, time = 6e6, N = 15000)
eur <- population("EUR", parent = afr, time = 70e3, N = 3000)
nea <- population("NEA", parent = afr, time = 600e3, N = 1000, remove = 40e3)

model <- compile_model(populations = list(chimp, nea, afr, eur), generation_time = 30)

cowplot::plot_grid(
  plot_model(model) + ggtitle("Normal time scale"),
  plot_model(model, log = TRUE, proportions = TRUE) + ggtitle("Logarithmic time scale")
)
```

## Exercise #3 --- adding `gene_flow()`

Add Neanderthal introgression into your model from Exercise #1 (let's say 3% pulse NEA -> EUR at 55 kya).

```{r}
#| echo: false
#| fig-align: center
chimp <- population("CHIMP", time = 7e6, N = 5000)
afr <- population("AFR", parent = chimp, time = 6e6, N = 15000)
eur <- population("EUR", parent = afr, time = 70e3, N = 3000)
nea <- population("NEA", parent = afr, time = 600e3, N = 1000, remove = 40e3)

gf <- gene_flow(from = nea, to = eur, rate = 0.03, start = 50000, end = 40000)

model <- compile_model(
  populations = list(chimp, nea, afr, eur),
  gene_flow = gf,
  generation_time = 30
)

cowplot::plot_grid(
  plot_model(model) + ggtitle("Normal time scale"),
  plot_model(model, log = TRUE, proportions = TRUE) + ggtitle("Logarithmic time scale")
)
```

# Exercise #3 --- solution

# Exercise #4

## Exercise #4 --- popgen statistics

```{r}
#| fig-align: center
plot_model(model)
```

## Exercise #4 --- popgen statistics

Compute [nucleotide diversity ($\pi$)](https://en.wikipedia.org/wiki/Nucleotide_diversity) in each population (`ts_diversity()`). Do your results with known $N_e$ values?

<hr>

Compute `ts_divergence()` (genetic divergence) or `ts_fst()` ([$F_{ST}$](https://en.wikipedia.org/wiki/Fixation_index)) between populations. Do the results match the model?

<hr>

Compute the "outgroup $f_3$" using CHIMP as the outgroup (`ts_f3()`) for different pairs of "A" and "B" populations.

<hr>

Test Neanderthal introgression in EUR using the $f_4$ statistic (`ts_f4()`). \[hint: $f_4$(AFR, EUR; NEAND, CHIMP)\]

## Exercise #4 --- popgen statistics

A useful R trick for handling recorded samples:

```{r}
#| echo: false
ts <- msprime(model, sequence_length = 100, recombination_rate = 0)
```

::: columns
::: {.column width="40%"}
```{r}
ts_samples(ts)
```
:::

::: {.column width="60%"}
::: fragment
```{r}
samples <- ts_samples(ts) %>%
  split(., .$pop) %>%
  lapply(pull, "name")
```

<br>

::: fragment
```{r}
str(samples)
```
:::
:::
:::
:::

# Exercise #4 --- solution

# Time-series data

## Sampling aDNA samples through time

<br>

Imagine we have `pop1`, `pop2`, ... compiled in a `model`.

<br>

To record *ancient* individuals in the tree sequence, we can use `schedule_sampling()` like this:

```{r}
#| eval: false
schedule_sampling(
  model,                # compiled slendr model object
  times = c(100, 500),  # at these times (can be also a single number) ...
  list(pop1, 42),       # ... sample 42 individuals from pop1
  list(pop2, 10),       # ... sample 10 individuals from pop2
  list(pop3, 1)         # ... sample 1 individual from pop 3
) 
```

## Sampling schedule format

The output of `schedule_sampling()` is a plain data frame:

```{r}
schedule_sampling(model, times = c(40000, 30000, 20000, 10000), list(eur, 1))
```

. . .

We can bind multiple sampling schedules together, giving us finer control about sampling:

```{r}
eur_samples <- schedule_sampling(model, times = c(40000, 30000, 20000, 10000, 0), list(eur, 1))
afr_samples <- schedule_sampling(model, times = 0, list(afr, 1))

samples <- bind_rows(eur_samples, afr_samples)
```

## How to use a sampling schedule?

To sample individuals based on a given schedule, we use the `samples =` argument of the `msprime()` functions:

```{r}
ts <- msprime(model, samples = samples, sequence_length = 1e6, recombination_rate = 1e-8) %>% 
  ts_mutate(mutation_rate = 1e-8)
```

. . .

We can verify that only specific individuals are recorded:

::: columns
::: {.column width="40%"}
```{r}
ts_samples(ts)
```
:::

::: {.column width="60%"}
::: fragment
```{r}
ts
```
:::
:::
:::

# Exercise #5

## Exercise #5a --- ancient samples

```{r}
#| echo: false
chimp <- population("CHIMP", time = 7e6, N = 5000)
afr <- population("AFR", parent = chimp, time = 6e6, N = 15000)
eur <- population("EUR", parent = afr, time = 70e3, N = 3000)
nea <- population("NEA", parent = afr, time = 600e3, N = 1000, remove = 40e3)

gf <- gene_flow(from = nea, to = eur, rate = 0.03, start = 50000, end = 40000)

model <- compile_model(
  populations = list(chimp, nea, afr, eur),
  gene_flow = gf,
  generation_time = 30
)

plot_model(model)
```

## Exercise #5a --- ancient samples

Simulate data from your model using this sampling:

-   one present-day CHIMP and AFR individual
-   20 present-day EUR individuals
-   1 NEA at 70 ky, 1 NEA at 40 ky
-   1 EUR every 1000 years between 50-5 kya

Reminder: you can do this by:

```{r}
#| eval: false
samples <- # rbind(...) together individual schedule_sampling() data frames

ts <-
  msprime(model, samples = samples, sequence_length = 100e6, recombination_rate = 1e-8) %>%
  ts_mutate(mutation_rate = 1e-8)
```

## Exercise #5b --- $f_4$-ratio statistic

Use $f_4$-ratio statistic to replicate the [following figure](https://www.pnas.org/doi/10.1073/pnas.1814338116#fig01):

![](images/neand_decline.png){width="60%" fig-align="center"}

::: aside
Hint: You can compute Neanderthal ancestry for a vector of individuals `X` as `ts_f4ratio(ts, X = X, "NEA_1", "NEA_2", "AFR_1", "CHIMP_1")`.
:::

# Exercise #5 --- solution

## More information

<br>

- _slendr_ paper on [bioRxiv](https://www.biorxiv.org/content/10.1101/2022.03.20.485041v3)

- Documentation, tutorials can be found [here](https://www.slendr.net)

- GitHub repo (bug reports!) is [here](http://github.com/bodkan/slendr)

<hr>

- new R package for ABC modeling [_demografr_](http://github.com/bodkan/demografr)
